---
import "@/styles/globals.css";
import Header from "@/components/Header";
import Background from "@/components/Background.astro";
import Footer from "@/components/Footer.astro";

interface Props {
  lang: "ar" | "en";
}
const { lang } = Astro.props;
const currentURL = Astro.url.pathname;
---

<html lang={lang} dir={lang === "en" ? "ltr" : "rtl"}>
  <head>
    <!-- Google tag (gtag.js) -->
    <script
      is:inline
      type="text/partytown"
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-FC1XF8KJH5"></script>
    <script type="text/partytown" is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-FC1XF8KJH5");
    </script>
    <slot name="seo" />
    {
      lang === "ar" && (
        <>
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
          <link
            href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Arabic:wght@100;200;300;400;500;600;700&display=swap"
            rel="stylesheet"
          />
        </>
      )
    }
  </head>
  <body
    class="flex min-h-screen flex-col justify-between selection:bg-indigo-700 selection:text-indigo-100"
  >
    <Background />
    <Header lang={lang} currentURL={currentURL} client:load />
    <section class="flex grow-[1] flex-col pt-20">
      <slot name="content" />
    </section>
    <Footer lang={lang} />
  </body>
</html>

<style>
  :root[lang="ar"] {
    font-family: "IBM Plex Sans Arabic", sans-serif;
  }
</style>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
